[{"/Users/christopherwong/Documents/Hack reactor/bootcamp/MVP references/Speech-Command-Recognition-Control-On-Screen-Elements/src/index.js":"1","/Users/christopherwong/Documents/Hack reactor/bootcamp/MVP references/Speech-Command-Recognition-Control-On-Screen-Elements/src/App.js":"2","/Users/christopherwong/Documents/Hack reactor/bootcamp/MVP references/Speech-Command-Recognition-Control-On-Screen-Elements/src/reportWebVitals.js":"3","/Users/christopherwong/Documents/Hack reactor/bootcamp/MVP references/Speech-Command-Recognition-Control-On-Screen-Elements/src/utilities.js":"4"},{"size":500,"mtime":1673393095413,"results":"5","hashOfConfig":"6"},{"size":6487,"mtime":1673552007842,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1673393095413,"results":"8","hashOfConfig":"6"},{"size":982,"mtime":1673478741672,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"tigwy7",{"filePath":"13","messages":"14","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/christopherwong/Documents/Hack reactor/bootcamp/MVP references/Speech-Command-Recognition-Control-On-Screen-Elements/src/index.js",[],["20","21"],"/Users/christopherwong/Documents/Hack reactor/bootcamp/MVP references/Speech-Command-Recognition-Control-On-Screen-Elements/src/App.js",["22","23","24","25","26","27","28","29"],"import React, {useEffect, useState, useRef} from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport pikaPic from './pikachu.jpeg';\nimport pikaGif from './red.gif';\nimport msGif from './ms2.gif';\nimport dogGif from './dog.gif';\nimport babyGif from './baby.gif';\nimport gokuGif from './goku.gif';\nimport lazydogGif from './lazydog.gif';\nimport pusheenGif from './pusheen.gif';\nimport fartGif from './fart.gif';\nimport flydogGif from './flydog.gif';\nimport rolldogGif from './rolldog.gif';\nimport foxGif from './fox.gif';\nimport charlieDance from './charlieDance.gif';\nimport ad from './ad.gif';\nimport Sound from 'react-sound';\nimport song from './Hunt.mp3';\nimport speak from './speak.png';\n// https://github.com/tensorflow/tfjs-models/tree/master/speech-commands\n\n// 0. Import depdendencies\nimport * as tf from \"@tensorflow/tfjs\"\nimport * as speech from \"@tensorflow-models/speech-commands\"\n\n// 4. Draw Ball\n// import {drawBall} from \"./utilities\";\n\nconst App = () => {\nconst [isPlaying, setIsPlaying] = useState(false);\nconst [gif, setGif] = useState(pikaGif)\n// 1. Create model and action states\nconst [model, setModel] = useState(null)\nconst [action, setAction] = useState(null)\nconst [labels, setLabels] = useState(null)\n// const [one, setOne] = useState({p:msGif, c:0})\n\n// 6. Create Canvas Ref and x,y,r\n// const canvasRef = useRef(null);\nconst [x, setX] = useState(600)\nconst [y, setY] = useState(350)\n// const [r, setR] = useState(10)\nconst [donate, setDonate] = useState(100);\nconst [change, setChange] = useState(0)\n\n// 2. Create Recognizer\nconst loadModel = async () =>{\n  const recognizer = await speech.create(\"BROWSER_FFT\")\n  console.log('Model Loaded')\n  await recognizer.ensureModelLoaded();\n  console.log(recognizer.wordLabels())\n  setModel(recognizer)\n  setLabels(recognizer.wordLabels())\n}\n\nuseEffect(()=>{loadModel()}, []);\n\n// 7. Update ball state\nconst numberMap = {\n  \"zero\":pikaGif,\n  // \"one\":one.p,\n  \"one\":msGif,\n  \"two\":dogGif,\n  \"three\":gokuGif,\n  \"four\":lazydogGif,\n  \"five\":pusheenGif,\n  \"six\":flydogGif,\n  \"seven\":rolldogGif,\n  \"eight\":foxGif,\n  \"nine\":fartGif,\n}\n\nuseEffect(()=>{\n  // Update position x,y\n  const update = action === 'up' ? setY(y-100) : action===\"down\" ? setY(y+100) : action===\"left\" ? setX(x-100) : action===\"right\"? setX(x+100) : ''\n  //action===\"go\" ? setIsPlaying(true) : action===\"stop\" ? setIsPlaying(false) : ''\n  // Update size r\n  if(Object.keys(numberMap).includes(action)){\n    // setR(10*numberMap[action])\n    // setGif({p: numberMap[action]})\n    setGif(numberMap[action])\n  }\n  if (action===\"go\") {\n    setIsPlaying(true)\n  }\n  if (action===\"stop\") {\n    setIsPlaying(false)\n  }\n\n  // canvasRef.current.width = 600;\n  // canvasRef.current.height = 600;\n  // const ctx = canvasRef.current.getContext('2d')\n  // let canvas = document.getElementById('canvas');\n  // const ctx = canvas.getContext('2d')\n  // console.log(x,y,r)\n  // drawBall(ctx,x,y,r)\n\n  // const image = new Image();\n  // image.src = './pikachu.jpeg';\n  // image.onload = () => {\n  //   ctx.drawImage(image, x, y);\n  // };\n\n  // setAction('base')\n\n}, [action])\n\n// 3. Listen for Actions\nfunction argMax(arr){\n  return arr.map((x, i) => [x, i]).reduce((r, a) => (a[0] > r[0] ? a : r))[1];\n}\n\nconst recognizeCommands = async () =>{\n  console.log('Listening for commands')\n  model.listen(result=>{\n    // console.log(labels[argMax(Object.values(result.scores))])\n    setAction(labels[argMax(Object.values(result.scores))])\n\n  }, {includeSpectrogram:true, probabilityThreshold:0.9})\n  // setTimeout(()=>model.stopListening(), 10e3)\n}\n\n  const handleChange = () => {\n\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      {/* <h1>Speak</h1>\n      <h2>Find your Voice</h2> */}\n      <img src={speak} alt=''/>\n      {/* <img src={ad} alt='' style = {{\n        position: 'absolute',\n        top: '50px',\n        right:'25px',\n        height: '200px',\n        width: '150px',\n      }}/> */}\n      <button onClick={recognizeCommands}>Command</button>\n          {action ? <div>{action}</div>:<div>No Action Detected</div> }\n      <img src={gif} alt='' width='250' height='200'\n        style={{\n          position: \"absolute\",\n          left: `${x}px`,\n          top: `${y}px`,\n        }}\n      />\n      <div style={{\n        position: 'absolute',\n        left: '125px',\n      }\n      }>\n        <div className='CL'>Command List</div>\n        <div>#0-9 --> Image</div>\n        <div>Direction --> Move</div>\n        <div>Go/Stop --> Music</div>\n      </div>\n\n        {/* 5. Setup Canvas */}\n        <canvas id='canvas'\n        // ref={canvasRef}\n        style={{\n          // backgroundColor: 'red',\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 465,\n          height: 465,\n        }}\n        />\n        {/* <div>\n          <div>one : {one.c}</div>\n          <div></div>\n        </div> */}\n        <div className='miss' >Our mission is to help those that have lost their voice. Whether you are technologically challenged, visually impaired, or just looking to simplify things, we are here to increase your quality of life through voice recognition and control. </div>\n      <div className='suffer'>Don't Suffer in Silence</div>\n      < img src={charlieDance} alt='' width='90' height='150'\n      />\n      <button onClick={()=>{setIsPlaying(!isPlaying)}}>{!isPlaying ? 'Play Music' : 'Stop Music'}</button>\n      <Sound\n        url={song}\n        playStatus={\n          isPlaying ? Sound.status.PLAYING : Sound.status.STOPPED\n        }\n      />\n      <div>\n         <form onSubmit={(e) => {\n        e.preventDefault();\n        setDonate(Number(donate) + Number(change));\n        window.prompt('Thank you for your generous donation!', 'I will donate more later on');\n        }}>\n        <label>How much money would you like to donate?</label>\n        <input value={change} onChange={(e)=>{setChange(e.target.value)}}>\n      </input>\n      <button type='submit'>Donate</button>\n      </form>\n      <div>Raised so far: ${donate}</div>\n      </div>\n\n      {/* <img src={pikaPic} alt=''\n      /> */}\n      {/* <img src={msGif} alt=''/> */}\n      {/* <div>Pikachu: Send Help D:</div> */}\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        {/* <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p> */}\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/christopherwong/Documents/Hack reactor/bootcamp/MVP references/Speech-Command-Recognition-Control-On-Screen-Elements/src/reportWebVitals.js",[],"/Users/christopherwong/Documents/Hack reactor/bootcamp/MVP references/Speech-Command-Recognition-Control-On-Screen-Elements/src/utilities.js",["30"],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":1,"column":37,"nodeType":"37","messageId":"38","endLine":1,"endColumn":43},{"ruleId":"35","severity":1,"message":"39","line":4,"column":8,"nodeType":"37","messageId":"38","endLine":4,"endColumn":15},{"ruleId":"35","severity":1,"message":"40","line":8,"column":8,"nodeType":"37","messageId":"38","endLine":8,"endColumn":15},{"ruleId":"35","severity":1,"message":"41","line":17,"column":8,"nodeType":"37","messageId":"38","endLine":17,"endColumn":10},{"ruleId":"35","severity":1,"message":"42","line":24,"column":13,"nodeType":"37","messageId":"38","endLine":24,"endColumn":15},{"ruleId":"35","severity":1,"message":"43","line":76,"column":9,"nodeType":"37","messageId":"38","endLine":76,"endColumn":15},{"ruleId":"44","severity":1,"message":"45","line":107,"column":4,"nodeType":"46","endLine":107,"endColumn":12,"suggestions":"47"},{"ruleId":"35","severity":1,"message":"48","line":124,"column":9,"nodeType":"37","messageId":"38","endLine":124,"endColumn":21},{"ruleId":"49","severity":1,"message":"50","line":3,"column":1,"nodeType":"51","messageId":"52","endLine":3,"endColumn":44},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'pikaPic' is defined but never used.","'babyGif' is defined but never used.","'ad' is defined but never used.","'tf' is defined but never used.","'update' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'numberMap', 'x', and 'y'. Either include them or remove the dependency array. You can also do a functional update 'setY(y => ...)' if you only need 'y' in the 'setY' call.","ArrayExpression",["55"],"'handleChange' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-global-assign","no-unsafe-negation",{"desc":"56","fix":"57"},"Update the dependencies array to be: [action, numberMap, x, y]",{"range":"58","text":"59"},[3100,3108],"[action, numberMap, x, y]"]